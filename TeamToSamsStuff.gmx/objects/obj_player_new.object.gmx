<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_new</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.ammo = 100;
global.hp=100;
global.maxhp=100;
enum actions 
{
    idle,
    moving
}
action = actions.idle;
state = states.normal; //states is created when rm_desert is created
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code sets the players sprite back to his idle after an action.
sprite_index = spr_player_idle_new;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_player_input(); //Get player input
<<<<<<< HEAD
shootdir = point_direction(x, y, mouse_x, mouse_y); //Calc direction mouse is related to player object.
//Switch case based on if moving or not
=======
//var shootdir = point_direction(x,y,mouse_x,mouse_y);
>>>>>>> refs/remotes/origin/master
if(key_left || key_right || key_up || key_down)
    action = actions.moving;
else
    action = actions.idle;
switch(action)
{
    case actions.idle:
    scr_player_idle();
    break;
    
    case actions.moving:
    scr_player_moving();
    break;
}


/*
Player facing is based on mouse position, using sub-images of obj's sprite.
Giving image_index the index of the sub-image to use.
shootdir will hold a value from 0 to 360 depending on mouse position on screen.
Changing back to idle sprite from any action sprite is handled with the alarm event on object.

if(shootdir &gt; 330||shootdir  &lt;22.5){
    image_index = 6; //Face right
    lenx = 11;
    leny = 1;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
else if(shootdir &gt;22.5&amp;&amp;shootdir&lt;67.5){
    image_index = 5; //Face upper right
    lenx = 16;
    leny = -4;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
else if(shootdir&gt;67.5&amp;&amp;shootdir&lt;112.5){
    image_index = 4; //Face up
    lenx = 0;
    leny = 0;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
else if(shootdir&gt;112.5&amp;&amp;shootdir&lt;157.5){
    image_index = 3; //Face upper left
    lenx = -16;
    leny = -4;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
else if(shootdir&gt;157.5&amp;&amp;shootdir&lt;202.5){
    image_index = 2; //Face left
    lenx = -11;
    leny = 5;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
else if(shootdir&gt;202.5&amp;&amp;shootdir&lt;247.5){
    image_index = 1; //Face lower left
    lenx = -16;
    leny = 10;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
else if(shootdir&gt;247.5&amp;&amp;shootdir&lt;292.5){
    image_index = 0; //Face down
    lenx = -9;
    leny = 20;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
else if(shootdir&gt;292.5&amp;&amp;shootdir&lt;330){
    image_index = 7; //Face lower right
    lenx = 0;
    leny = 12;
    if(key_shoot &amp;&amp; global.ammo &gt; 0) //Change to shooting sprite
    {
        alarm[0] = 1 * room_speed;
        //play some sound here
        instance_create(obj_player_new.x + lenx, obj_player_new.y + leny, obj_bullet);
        sprite_index = spr_player_shoot;
    }
}
*/

//Trying to get movement animation to work right
/*if (key_left) 
{
    sprite_index = spr_player_left_new; //Mouse changes sub image of sprite. Animation wont play.
    image_index = 0;
    image_speed = 0.3;
}
*/
/*
switch(state){

    case states.normal:
        if(key_left){
            x-=4;
        }
        if(key_right){
            x+=4;
        }
        if(key_up){
            y-=4;
        }
        if(key_down){
            y+=4;
        }
    break;


}
*/
if(key_inventory)
{
    if(global.showInv == true)
        global.showInv = false;
    else
        global.showInv = true;  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rock_0">
      <action>
        <libid>1</libid>
        <id>116</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move_contact</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>direction</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.hp-=20;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(scr_item_check(3)==1){
    instance_create(x,y,obj_dynamite);
    
    scr_item_drop(3,object_get_sprite(obj_tnt_pickup),-1);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(scr_item_check(3)==1){
    instance_create(x,y,obj_dynamite);
    
    scr_item_drop(3,object_get_sprite(obj_tnt_pickup),-1);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
